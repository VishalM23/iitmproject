void intDiv(mpint *t, mpint *s, mpint n, mpint m)
{
	if(t!=NULL)
		*t=n/m;
	if(s!=NULL)
		*s=n%m;
}
void intDivTwo(mpint *t, mpint *s, mpint n, long e)
{
	int n1=0;
	twoPowerToInt(mpint &n1, long e);
	if(t!=NULL)
		*t=n/n1;
	if(s!=NULL)
		*s=n%n1;
}
void intModProd(mpint *t, mpint n, mpint m, mpint r)
{
	*t=(n*m)%r;
}
void intModExp(mpint *t, mpint n, mpint e, mpint r)
{
	int t1=0;
	intExp (mpint &t1, mpint n, mpint e);
	*t=t1%r;
}

void modpInv(GFelement *t, GFelement n, GFelement m)
{
	n= n%m;
    	for (int x=1; x<m; x++) 
      		 if((n*x) % m == 1) 
         		 *t=x;
}
void intPP(mpint *n) 
{
	*n++;
}
void intMM(mpint *n) 
{
	n––;
}
void intInc(mpint *n, long a)
{
	n+= a;//ncrement n by the long a)
}
void intDec(mpint *n, long a)	
{	
	 n –= a ;//ecrement n by the long a)
}

void intOR(mpint *t, mpint n, mpint m)
{
	*t=m|n;//t is assigned the bitwise OR of n and m.

}
void intAND(mpint *t, mpint n, mpint m) 
{
	*t=m&n;//t is assigned to bitwise and of m and n
}
void intXOR(mpint *t, mpint n, mpint m)	
{
	*t=m^n;// t is assigned the bitwise XOR of n and m.

}
void intLeftShift (mpint *n, long e)	
{
		*n=(*n<<e);//	Left shift n by e bits.
}
 
void intRightShift (mpint *n, long e) 
{
		*n=(*n>>e);	//eft shift n by e bits.
}
